diff --git a/dist/mdx/1.1.remark-list-to-section.js b/dist/mdx/1.1.remark-list-to-section.js
index 9cd77a6a79f701a69ddca581cfd439cc31c52dd3..9c06b364127df867dd323e4f2fbf4e1827028ce9 100644
--- a/dist/mdx/1.1.remark-list-to-section.js
+++ b/dist/mdx/1.1.remark-list-to-section.js
@@ -4,187 +4,269 @@ const DEFAULT_CODE_NAME = "code";
 const DEFAULT_IMAGES_NAME = "image";
 const DEFAULT_VALUE_NAME = "value";
 export async function listToSection(hikeElement, config) {
-    var _a, _b, _c, _d, _e, _f;
-    const { children = [] } = hikeElement;
-    const root = {
+  var _a, _b, _c, _d, _e, _f;
+  const { children = [] } = hikeElement;
+  const root = {
+    type: "section",
+    _data: {
+      header: "",
+    },
+    name: "",
+    depth: 0,
+    title: "",
+    parent: null,
+    children: [],
+    multi: false,
+  };
+  let parent = root;
+  for (const child of children) {
+    if (
+      child.type === "heading" &&
+      ((_a = child.children[0]) === null || _a === void 0
+        ? void 0
+        : _a.type) === "text" &&
+      ((_c =
+        (_b = child.children[0]) === null || _b === void 0
+          ? void 0
+          : _b.value) === null || _c === void 0
+        ? void 0
+        : _c.trim().startsWith("!"))
+    ) {
+      while (parent.depth >= child.depth && parent.parent) {
+        parent = parent.parent;
+      }
+      const { name, title, multi } = parseHeading(child);
+      const section = {
         type: "section",
         _data: {
-            header: "",
+          header: "#".repeat(child.depth) + " " + child.children[0].value,
         },
-        name: "",
-        depth: 0,
-        title: "",
-        parent: null,
+        parent,
+        depth: child.depth,
+        name,
+        title,
+        multi,
+        index: !multi
+          ? undefined
+          : parent.children.filter(
+              (c) => c.type != "content" && c.name === name,
+            ).length,
         children: [],
-        multi: false,
-    };
-    let parent = root;
-    for (const child of children) {
-        if (child.type === "heading" &&
-            ((_a = child.children[0]) === null || _a === void 0 ? void 0 : _a.type) === "text" &&
-            ((_c = (_b = child.children[0]) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.trim().startsWith("!"))) {
-            while (parent.depth >= child.depth && parent.parent) {
-                parent = parent.parent;
-            }
-            const { name, title, multi } = parseHeading(child);
-            const section = {
-                type: "section",
-                _data: {
-                    header: "#".repeat(child.depth) + " " + child.children[0].value,
-                },
-                parent,
-                depth: child.depth,
-                name,
-                title,
-                multi,
-                index: !multi
-                    ? undefined
-                    : parent.children.filter((c) => c.type != "content" && c.name === name).length,
-                children: [],
-            };
-            parent.children.push(section);
-            parent = section;
-        }
-        else if (child.type === "heading" &&
-            ((_d = child.children[0]) === null || _d === void 0 ? void 0 : _d.type) === "text" &&
-            ((_f = (_e = child.children[0]) === null || _e === void 0 ? void 0 : _e.value) === null || _f === void 0 ? void 0 : _f.trim()) === "/") {
-            while (parent.depth >= child.depth && parent.parent) {
-                parent = parent.parent;
-            }
-        }
-        else if (isHikeCode(child)) {
-            const parsedChild = await parseCode(child, config);
-            const { name = DEFAULT_CODE_NAME, multi, title, } = parseName(parsedChild.meta || "");
-            parent.children.push({
-                type: "code",
-                name,
-                multi,
-                index: multi
-                    ? parent.children.filter((c) => c.type != "content" && c.name === name).length
-                    : undefined,
-                // will need to use getObjectAttribute
-                ...parsedChild,
-                meta: title,
-            });
-        }
-        else if (isImageAndParagraphs(child)) {
-            child.children.forEach((c) => {
-                var _a;
-                if (c.type == "text" && c.value.trim() === "") {
-                    // ignore
-                }
-                else if (c.type == "text" && c.value.trim().startsWith("!")) {
-                    const values = splitValues(c.value);
-                    values.forEach((value) => {
-                        const { name = DEFAULT_VALUE_NAME, multi, title } = parseName(value);
-                        parent.children.push({
-                            type: "quote",
-                            name,
-                            multi,
-                            index: multi
-                                ? parent.children.filter((c) => c.type != "content" && c.name === name).length
-                                : undefined,
-                            value: title,
-                        });
-                    });
-                }
-                else if (c.type == "image" && ((_a = c.alt) === null || _a === void 0 ? void 0 : _a.startsWith("!"))) {
-                    const img = c;
-                    const { name = DEFAULT_IMAGES_NAME, title, multi, } = parseName(img.alt || "");
-                    parent.children.push({
-                        type: "image",
-                        name,
-                        multi,
-                        index: multi
-                            ? parent.children.filter((c) => c.type != "content" && c.name === name).length
-                            : undefined,
-                        alt: title,
-                        title: img.title || "",
-                        url: img.url,
-                    });
-                }
-            });
-        }
-        else {
+      };
+      parent.children.push(section);
+      parent = section;
+    } else if (
+      child.type === "heading" &&
+      ((_d = child.children[0]) === null || _d === void 0
+        ? void 0
+        : _d.type) === "text" &&
+      ((_f =
+        (_e = child.children[0]) === null || _e === void 0
+          ? void 0
+          : _e.value) === null || _f === void 0
+        ? void 0
+        : _f.trim()) === "/"
+    ) {
+      while (parent.depth >= child.depth && parent.parent) {
+        parent = parent.parent;
+      }
+    } else if (isHikeCode(child)) {
+      const parsedChild = await parseCode(child, config);
+      const {
+        name = DEFAULT_CODE_NAME,
+        multi,
+        title,
+      } = parseName(parsedChild.meta || "");
+      parent.children.push({
+        type: "code",
+        name,
+        multi,
+        index: multi
+          ? parent.children.filter(
+              (c) => c.type != "content" && c.name === name,
+            ).length
+          : undefined,
+        // will need to use getObjectAttribute
+        ...parsedChild,
+        meta: title,
+      });
+    } else if (isImageAndParagraphs(child)) {
+      child.children.forEach((c) => {
+        var _a;
+        if (c.type == "text" && c.value.trim() === "") {
+          // ignore
+        } else if (c.type == "text" && c.value.trim().startsWith("!")) {
+          const values = splitValues(c.value);
+          values.forEach((value) => {
+            const {
+              name = DEFAULT_VALUE_NAME,
+              multi,
+              title,
+            } = parseName(value);
             parent.children.push({
-                type: "content",
-                value: child,
+              type: "quote",
+              name,
+              multi,
+              index: multi
+                ? parent.children.filter(
+                    (c) => c.type != "content" && c.name === name,
+                  ).length
+                : undefined,
+              value: title,
             });
+          });
+        } else if (
+          c.type == "image" &&
+          ((_a = c.alt) === null || _a === void 0 ? void 0 : _a.startsWith("!"))
+        ) {
+          const img = c;
+          const {
+            name = DEFAULT_IMAGES_NAME,
+            title,
+            multi,
+          } = parseName(img.alt || "");
+          parent.children.push({
+            type: "image",
+            name,
+            multi,
+            index: multi
+              ? parent.children.filter(
+                  (c) => c.type != "content" && c.name === name,
+                ).length
+              : undefined,
+            alt: title,
+            title: img.title || "",
+            url: img.url,
+          });
         }
+      });
+    } else {
+      parent.children.push({
+        type: "content",
+        value: child,
+      });
     }
-    return root;
+  }
+  return root;
 }
 function splitValues(str) {
-    // (?:!!|!)           - Match either '!!' or '!' at the start of a line (non-capturing group)
-    // .*                 - Match any characters (except newline) after the '!!' or '!'
-    // (?:                - Start of non-capturing group
-    //   (?:\r?\n|\r)     - Match any common line ending: \r\n (Windows), \n (Unix), or \r (old Mac)
-    //   (?!!|!)          - Negative lookahead: the next line should not start with '!' or '!!'
-    //   .*               - Match any characters (except newline) on this continuation line
-    // )*                 - End of non-capturing group, repeat 0 or more times
-    return str.trim().match(/(?:!!|!).*(?:(?:\r?\n|\r)(?!!|!).*)*/g) || [];
+  const result = [];
+  let current = "";
+  let depth = 0;
+  let lastWasNewline = false;
+
+  for (let i = 0; i < str.length; i++) {
+    const char = str[i];
+
+    if (char === "(") depth++;
+    if (char === ")") depth--;
+
+    // Modified to only check for single !
+    if (lastWasNewline && str.slice(i).startsWith("!")) {
+      if (current.trim()) result.push(current.trim());
+      current = "";
+    }
+
+    current += char;
+    lastWasNewline = char === "\n" && depth === 0;
+  }
+
+  if (current.trim()) result.push(current.trim());
+
+  return result.filter((val) => val.startsWith("!"));
 }
 function isImageAndParagraphs(child) {
-    if (child.type !== "paragraph" || !child.children)
-        return false;
-    return child.children.every((c) => {
-        var _a;
-        return ((c.type === "image" && ((_a = c.alt) === null || _a === void 0 ? void 0 : _a.startsWith("!"))) ||
-            (c.type === "text" && c.value.trim().startsWith("!")) ||
-            (c.type === "text" && c.value.trim() === ""));
-    });
+  if (child.type !== "paragraph" || !child.children) return false;
+  return child.children.every((c) => {
+    var _a;
+    return (
+      (c.type === "image" &&
+        ((_a = c.alt) === null || _a === void 0
+          ? void 0
+          : _a.startsWith("!"))) ||
+      (c.type === "text" && c.value.trim().startsWith("!")) ||
+      (c.type === "text" && c.value.trim() === "")
+    );
+  });
 }
 export function isHikeElement(child) {
-    return (isHikeHeading(child) || isHikeCode(child) || isImageAndParagraphs(child));
+  return (
+    isHikeHeading(child) || isHikeCode(child) || isImageAndParagraphs(child)
+  );
 }
 function isHikeCode(child) {
-    var _a;
-    return child.type === "code" && ((_a = child.meta) === null || _a === void 0 ? void 0 : _a.trim().startsWith("!"));
+  var _a;
+  return (
+    child.type === "code" &&
+    ((_a = child.meta) === null || _a === void 0
+      ? void 0
+      : _a.trim().startsWith("!"))
+  );
 }
 function isHikeHeading(child) {
-    var _a, _b, _c;
-    return (child.type === "heading" &&
-        ((_a = child.children[0]) === null || _a === void 0 ? void 0 : _a.type) === "text" &&
-        ((_c = (_b = child.children[0]) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.trim().startsWith("!")));
+  var _a, _b, _c;
+  return (
+    child.type === "heading" &&
+    ((_a = child.children[0]) === null || _a === void 0 ? void 0 : _a.type) ===
+      "text" &&
+    ((_c =
+      (_b = child.children[0]) === null || _b === void 0
+        ? void 0
+        : _b.value) === null || _c === void 0
+      ? void 0
+      : _c.trim().startsWith("!"))
+  );
 }
 function parseName(value) {
-    const multi = value.startsWith("!!");
-    const content = multi ? value.slice(2) : value.slice(1);
-    const name = content === null || content === void 0 ? void 0 : content.split(/\s+/)[0];
-    const title = content === null || content === void 0 ? void 0 : content.slice(name.length).trim();
-    return {
-        name: name || undefined,
-        title,
-        multi,
-    };
+  // Remove previous multi check and make it always true
+  const multi = true;
+  const content = value.slice(1); // Only slice one !
+  const name =
+    content === null || content === void 0 ? void 0 : content.split(/\s+/)[0];
+  const title =
+    content === null || content === void 0
+      ? void 0
+      : content.slice(name.length).trim();
+  return {
+    name: name || undefined,
+    title,
+    multi,
+  };
 }
 function parseHeading(heading) {
-    var _a;
-    if (((_a = heading.children[0]) === null || _a === void 0 ? void 0 : _a.type) != "text") {
-        throw new Error("Heading must have text");
-    }
-    const value = heading.children[0].value.trim();
-    const multi = value.startsWith("!!");
-    const content = multi ? value.slice(2) : value.slice(1);
-    const name = content === null || content === void 0 ? void 0 : content.split(/\s+/)[0];
-    const title = content === null || content === void 0 ? void 0 : content.slice(name.length).trim();
-    return {
-        name: name || DEFAULT_BLOCKS_NAME,
-        title,
-        multi,
-    };
+  var _a;
+  if (
+    ((_a = heading.children[0]) === null || _a === void 0 ? void 0 : _a.type) !=
+    "text"
+  ) {
+    throw new Error("Heading must have text");
+  }
+  const value = heading.children[0].value.trim();
+  const multi = true; // Always true now
+  const content = value.slice(1); // Only slice one !
+  const name =
+    content === null || content === void 0 ? void 0 : content.split(/\s+/)[0];
+  const title =
+    content === null || content === void 0
+      ? void 0
+      : content.slice(name.length).trim();
+  return {
+    name: name || DEFAULT_BLOCKS_NAME,
+    title,
+    multi,
+  };
 }
 export async function parseCode(code, config) {
-    const rawCode = {
-        value: code.value,
-        lang: code.lang || "",
-        meta: code.meta || "",
-    };
-    if (config.syntaxHighlighting) {
-        if (!config.syntaxHighlighting.theme) {
-            throw new Error("No theme provided for syntax highlighting");
-        }
-        return await highlight(rawCode, config.syntaxHighlighting.theme);
+  const rawCode = {
+    value: code.value,
+    lang: code.lang || "",
+    meta: code.meta || "",
+  };
+  if (config.syntaxHighlighting) {
+    if (!config.syntaxHighlighting.theme) {
+      throw new Error("No theme provided for syntax highlighting");
     }
-    return rawCode;
+    return await highlight(rawCode, config.syntaxHighlighting.theme);
+  }
+  return rawCode;
 }
